CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
###################### Branding ##########################

SET(BRANDING_PROJECT_NAME "CutVideo" CACHE STRING "Branding for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_VERSION "0.1.0.0" CACHE STRING "Branding version for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_BUILD_TYPE_VERSION "alfa" CACHE STRING "Build version type for ${BRANDING_PROJECT_NAME}") #default
    #posible variables: alfa, beta, rc, release

SET(BRANDING_PROJECT_DOMAIN "www.topilski.com" CACHE STRING "Branding domain url for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_COMPANYNAME "Topilski" CACHE STRING "Company name for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_COMPANYNAME_DOMAIN "www.topilski.com" CACHE STRING "Internet domain name company for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_MAINTAINER_MAIL "atopilski@example.com" CACHE STRING "Internet mail address mainteiner of ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_MAINTAINER_NAME "Alexandr Topilski" CACHE STRING "Name of mainteiner for ${BRANDING_PROJECT_NAME}") #default

SET(BRANDING_PROJECT_GITHUB_FORK "www.github.com/topilski/cut_video" CACHE STRING "Branding fork url for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_GITHUB_ISSUES "www.github.com/topilski/cut_video/issues" CACHE STRING "Branding issues url for ${BRANDING_PROJECT_NAME}") #default

SET(BRANDING_PROJECT_HOMEPAGE_LINK "http://www.topilski.com" CACHE STRING "Home page link for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_FACEBOOK_LINK "https://www.facebook.com/profile.php?id=100010049712549" CACHE STRING "Facebook link for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_TWITTER_LINK "https://www.twitter.com/CutVideo" CACHE STRING "Twitter link for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_GITHUB_LINK "https://www.github.com/topilski/cut_video" CACHE STRING "Github link for ${BRANDING_PROJECT_NAME}") #default

SET(BRANDING_PROJECT_BREF_DESCRIPTION "Cross-platform open source cut video tool."
    CACHE STRING "Bref description for ${BRANDING_PROJECT_NAME}")
SET(BRANDING_PROJECT_COPYRIGHT "Copyright (C) 2014-2016 ${BRANDING_PROJECT_COMPANYNAME} All Rights Reserved."
    CACHE STRING "Copyright notice for ${BRANDING_PROJECT_NAME}") #default
SET(BRANDING_PROJECT_CHANGELOG_FILE changelog.txt
    CACHE STRING "Branding for changelog file ${BRANDING_PROJECT_NAME}
    (File name given as relative paths are interpreted with respect to the src source directory)") #default

PROJECT(${BRANDING_PROJECT_NAME} VERSION ${BRANDING_PROJECT_VERSION} LANGUAGES CXX C)
#################### Project Settings ####################
SET(PROJECT_NAME_TITLE ${PROJECT_NAME}) #PROJECT_NAME in cache
SET(PROJECT_DOMAIN ${BRANDING_PROJECT_DOMAIN})
SET(PROJECT_COMPANYNAME ${BRANDING_PROJECT_COMPANYNAME})
SET(PROJECT_COPYRIGHT ${BRANDING_PROJECT_COPYRIGHT})
SET(PROJECT_BREF_DESCRIPTION ${BRANDING_PROJECT_BREF_DESCRIPTION})
SET(PROJECT_COMPANYNAME_DOMAIN ${BRANDING_PROJECT_COMPANYNAME_DOMAIN})
SET(PROJECT_MAINTAINER_MAIL ${BRANDING_PROJECT_MAINTAINER_MAIL})
SET(PROJECT_MAINTAINER_NAME ${BRANDING_PROJECT_MAINTAINER_NAME})
SET(PROJECT_GITHUB_FORK ${BRANDING_PROJECT_GITHUB_FORK})
SET(PROJECT_GITHUB_ISSUES ${BRANDING_PROJECT_GITHUB_ISSUES})
SET(PROJECT_CHANGELOG_FILE ${BRANDING_PROJECT_CHANGELOG_FILE})
SET(PROJECT_BUILD_TYPE_VERSION ${BRANDING_PROJECT_BUILD_TYPE_VERSION})
SET(PROJECT_HOMEPAGE_LINK ${BRANDING_PROJECT_HOMEPAGE_LINK})
SET(PROJECT_FACEBOOK_LINK ${BRANDING_PROJECT_FACEBOOK_LINK})
SET(PROJECT_TWITTER_LINK ${BRANDING_PROJECT_TWITTER_LINK})
SET(PROJECT_GITHUB_LINK ${BRANDING_PROJECT_GITHUB_LINK})
##########################################################

STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)
STRING(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPERRCASE)
SET(PROJECT_CORE_LIBRARY ${PROJECT_NAME_LOWERCASE}core)

SET(PROJECT_VERSION_SHORT ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}) #PROJECT_VERSION_* in cache
SET(PROJECT_VERSION_INTEGER ${PROJECT_VERSION_MAJOR}${PROJECT_VERSION_MINOR}${PROJECT_VERSION_PATCH}) #PROJECT_VERSION_* in cache

MESSAGE(STATUS "PROJECT_VERSION: ${PROJECT_VERSION}")

IF(APPLE AND CMAKE_OSX_SYSROOT)
    STRING(REGEX REPLACE ".*MacOSX([0-9]+)\\.([0-9]+).*$" "\\1" DARWIN_MAJOR_SDK_VERSION "${CMAKE_OSX_SYSROOT}")
    STRING(REGEX REPLACE ".*MacOSX([0-9]+)\\.([0-9]+).*$" "\\2" DARWIN_MINOR_SDK_VERSION "${CMAKE_OSX_SYSROOT}")
    IF(EXISTS "${CMAKE_OSX_SYSROOT}")
        SET(MACOSX_DEPLOYMENT_TARGET ${DARWIN_MAJOR_SDK_VERSION}.${DARWIN_MINOR_SDK_VERSION})
        SET(CMAKE_CXX_FLAGS "--sysroot ${CMAKE_OSX_SYSROOT} ${CMAKE_CXX_FLAGS}")
        MESSAGE("Setting MACOSX_DEPLOYMENT_TARGET to '${MACOSX_DEPLOYMENT_TARGET}'.")
    ENDIF()
ENDIF(APPLE AND CMAKE_OSX_SYSROOT)

########################## Options #########################
OPTION(BUILD_WITH_REDIS "Build with Redis support" ON)
OPTION(BUILD_WITH_MEMCACHED "Build with Memcached support" ON)
OPTION(BUILD_WITH_SSDB "Build with SSDB support" ON)
OPTION(BUILD_WITH_LEVELDB "Build with LevelDB support" ON)
OPTION(BUILD_WITH_ROCKSDB "Build with RocksDB support" ON)
OPTION(BUILD_WITH_UNQLITE "Build with Unqlite support" ON)
OPTION(BUILD_WITH_LMDB "Build with LMDB support" ON)

OPTION(BUILD_WITH_SOCIAL_BUTTONS "Build with social buttons" ON)
OPTION(GENERATE_TRANSLATIONS "Generate ts-files for ${PROJECT_NAME}" OFF)
OPTION(USE_CXX_STANDART "Enable tests for ${PROJECT_NAME} project" ON)
OPTION(QT_ENABLED "Enable Qt support" ON)
OPTION(CPACK_SUPPORT "Enable package support" ON)
OPTION(DEVELOPER_DYNAMIC_RUNTIME "Build with dynamic C++ runtime" ON)
OPTION(DEVELOPER_FEATURES "Use some debug tricks for developers" OFF)
OPTION(DEVELOPER_ENABLE_TESTS "Enable tests for ${PROJECT_NAME_TITLE} project" OFF)

IF(MSVC)
    IF(CMAKE_CL_64)
        OPTION(BUILD_64X "Build 64bit project" ON)
    ELSE()
        OPTION(BUILD_64X "Build 64bit project" OFF)
    ENDIF()
ELSE(MSVC)
    IF("${OS_ARCH}" STREQUAL "64")
        OPTION(BUILD_64X "Build 64bit project" ON)
    ELSEIF("${OS_ARCH}" STREQUAL "32")
        OPTION(BUILD_64X "Build 64bit project" OFF)
    ELSE()
        IF(CMAKE_SIZEOF_VOID_P MATCHES 8) 
            OPTION(BUILD_64X "Build 64bit project" ON)
        ELSE(CMAKE_SIZEOF_VOID_P MATCHES 8) 
            OPTION(BUILD_64X "Build 64bit project" OFF)
        ENDIF(CMAKE_SIZEOF_VOID_P MATCHES 8)
    ENDIF()
ENDIF(MSVC)

MESSAGE(STATUS "BUILD_64X: ${BUILD_64X}")

##################################DEFAULT VALUES##########################################
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE DEBUG)
ENDIF(NOT CMAKE_BUILD_TYPE)

# If the user did not customize the install prefix,
# set it to live under build so we don't inadvertently pollute /usr/local
IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    SET(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "default install path" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

IF("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
    MESSAGE(SEND_ERROR "In-source builds are not allowed.")
ENDIF("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")

MESSAGE(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")

############################################################################

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}/cmake")
INCLUDE(fasto_config) ###################
DEFINE_DEFAULT_DEFINITIONS()

# Search libraries
# use Qt
DETECT_QT()
##################### Libraries search ###################
SET(QT_COMPONENTS_TO_USE Qt5Core Qt5Gui Qt5Widgets)
IF(OS_MACOSX)
    SET(QT_COMPONENTS_TO_USE ${QT_COMPONENTS_TO_USE} Qt5MacExtras)
ELSEIF(OS_LINUX)
    SET(QT_COMPONENTS_TO_USE ${QT_COMPONENTS_TO_USE} Qt5DBus) #for libqxcb
ENDIF(OS_MACOSX)

INTEGRATE_QT(${QT_COMPONENTS_TO_USE})

#use OpenSSL
FIND_PACKAGE(OpenSSL REQUIRED)
##########################################################

IF(OS_ANDROID)
    SET(ARCH_TEXT_PACKAGE ${ANDROID_NDK_ABI_NAME})
ELSE()
    IF(BUILD_64X)
        SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 1)
    #    IF(CMAKE_COMPILER_IS_GNUCXX)
    #        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
    #        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64")
    #        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m64")
    #        SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m64")
    #        SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -m64")
    #    ENDIF(CMAKE_COMPILER_IS_GNUCXX)
        IF(OS_MACOSX)
            SET(CMAKE_OSX_ARCHITECTURES x86_64)
        ENDIF(OS_MACOSX)

        SET(ARCH_TEXT_PACKAGE x86_64)#amd64
    ELSE()
        SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 0)
     #   IF(CMAKE_COMPILER_IS_GNUCXX)
     #       SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
     #       SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
     #       SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
     #       SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m32")
     #       SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -m32")
     #   ENDIF(CMAKE_COMPILER_IS_GNUCXX)
        IF(OS_MACOSX)
            SET(CMAKE_OSX_ARCHITECTURES i386)
            #-DCMAKE_OSX_ARCHITECTURES= ;i386
        ENDIF(OS_MACOSX)

        SET(ARCH_TEXT_PACKAGE i386)
    ENDIF(BUILD_64X)
ENDIF(OS_ANDROID)

IF(OS_WINDOWS)
    SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/win.rc")
    SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/winres.rc.in")
    SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/icon.ico")
    SET(LIB_INSTALL_DESTINATION .)
    SET(TARGET_INSTALL_DESTINATION .)
ELSEIF(OS_MACOSX)
    SET(RESOURCE_OS		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
    SET(RESOURCE_OS_IN	"${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
    SET(ICON_FILE_IN	"${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/osx/icon.icns")
    SET(LIB_INSTALL_DESTINATION .)
    SET(TARGET_INSTALL_DESTINATION .)
ELSEIF(OS_LINUX)
    SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
    SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
    SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
    SET(LIB_INSTALL_DESTINATION lib)
    SET(TARGET_INSTALL_DESTINATION bin)
ELSEIF(OS_FREEBSD)
    SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
    SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
    SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
    SET(LIB_INSTALL_DESTINATION lib)
    SET(TARGET_INSTALL_DESTINATION bin)
ELSEIF(OS_ANDROID)
    SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
    SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
    SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/icon.png")
    SET(LIB_INSTALL_DESTINATION libs/${ANDROID_NDK_ABI_NAME})
    SET(TARGET_INSTALL_DESTINATION libs/${ANDROID_NDK_ABI_NAME}) #libs/armeabi-v7a
ENDIF(OS_WINDOWS)
GET_FILENAME_COMPONENT(ICON_FILE_IN_EXTENSION ${ICON_FILE_IN} EXT)
SET(ICON_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}${ICON_FILE_IN_EXTENSION})
CONFIGURE_FILE("${ICON_FILE_IN}" "${ICON_FILE}" COPYONLY)

# project sources
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

IF(BUILD_WITH_REDIS)
    ADD_DEFINITIONS(-DBUILD_WITH_REDIS)
ENDIF(BUILD_WITH_REDIS)
IF(BUILD_WITH_MEMCACHED)
    ADD_DEFINITIONS(-DBUILD_WITH_MEMCACHED)
ENDIF(BUILD_WITH_MEMCACHED)
IF(BUILD_WITH_SSDB)
    ADD_DEFINITIONS(-DBUILD_WITH_SSDB)
ENDIF(BUILD_WITH_SSDB)
IF(BUILD_WITH_LEVELDB)
    ADD_DEFINITIONS(-DBUILD_WITH_LEVELDB)
ENDIF(BUILD_WITH_LEVELDB)
IF(BUILD_WITH_ROCKSDB)
    ADD_DEFINITIONS(-DBUILD_WITH_ROCKSDB)
ENDIF(BUILD_WITH_ROCKSDB)
IF(BUILD_WITH_UNQLITE)
    ADD_DEFINITIONS(-DBUILD_WITH_UNQLITE)
ENDIF(BUILD_WITH_UNQLITE)
IF(BUILD_WITH_LMDB)
    ADD_DEFINITIONS(-DBUILD_WITH_LMDB)
ENDIF(BUILD_WITH_LMDB)

ADD_DEFINITIONS(-DPROJECT_BUILD_TYPE_VERSION="${PROJECT_BUILD_TYPE_VERSION}" -DPROJECT_BREF_DESCRIPTION="${PROJECT_BREF_DESCRIPTION}")
IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
    ADD_DEFINITIONS(-DPROJECT_BUILD_RELEASE)
ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")

IF(BUILD_WITH_SOCIAL_BUTTONS)
ADD_DEFINITIONS(
        -DBUILD_WITH_SOCIAL_BUTTONS
        -DPROJECT_HOMEPAGE_LINK="${PROJECT_HOMEPAGE_LINK}"
        -DPROJECT_FACEBOOK_LINK="${PROJECT_FACEBOOK_LINK}"
        -DPROJECT_TWITTER_LINK="${PROJECT_TWITTER_LINK}"
        -DPROJECT_GITHUB_LINK="${PROJECT_GITHUB_LINK}"
)
ENDIF(BUILD_WITH_SOCIAL_BUTTONS)

ADD_SUBDIRECTORY(src)

#cpack

IF(CPACK_SUPPORT)
    SET(CPACK_PACKAGE_DESCRIPTION "Shell-centric cross-platform Redis and Memchached management tool.")
    SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME_TITLE} cross-platform Redis and Memchached management tool.")
    #CPACK_DEBIAN_PACKAGE_DESCRIPTION CPACK_RPM_PACKAGE_SUMMARY
    SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/LICENSE")#CPACK_RPM_PACKAGE_DESCRIPTION
    SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
    SET(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
    SET(CPACK_RESOURCE_FILE_WELCOME "${CMAKE_SOURCE_DIR}/README.md")

    SET(CPACK_PACKAGE_VENDOR "${PROJECT_COMPANYNAME}")#CPACK_RPM_PACKAGE_VENDOR
    SET(CPACK_PACKAGE_CONTACT "${PROJECT_MAINTAINER_NAME} <${PROJECT_MAINTAINER_MAIL}>")#CPACK_DEBIAN_PACKAGE_MAINTAINER
    
    SET(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
    SET(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
    SET(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_SHORT})

    IF(NOT PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
        IF(PROJECT_VERSION_TWEAK)
            SET(CPACK_PACKAGE_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}-${PROJECT_BUILD_TYPE_VERSION}${PROJECT_VERSION_TWEAK}")
        ENDIF(PROJECT_VERSION_TWEAK)
    ENDIF()

    SET(CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_PATCH})#CPACK_DEBIAN_PACKAGE_VERSION CPACK_RPM_PACKAGE_VERSION
    SET(CPACK_PACKAGE_NAME ${PROJECT_NAME_LOWERCASE})#CPACK_DEBIAN_PACKAGE_NAME CPACK_RPM_PACKAGE_NAME
    SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${ARCH_TEXT_PACKAGE}")#out package name
    SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}")  
    SET(CPACK_PACKAGE_INSTALL_DIRECTORY ${PROJECT_NAME})
    SET(CPACK_PACKAGE_EXECUTABLES "${PROJECT_NAME_TITLE};${PROJECT_NAME}")
    MESSAGE(STATUS "CPACK_PACKAGE_FILE_NAME: ${CPACK_PACKAGE_FILE_NAME}") 
    SET(CPACK_MONOLITHIC_INSTALL ON)

    IF(OS_WINDOWS)
        IF(NOT CPACK_GENERATOR)
            SET(CPACK_GENERATOR NSIS)
        ENDIF(NOT CPACK_GENERATOR)	
        IF(CPACK_GENERATOR STREQUAL "NSIS")
            IF(BUILD_64X)
                SET(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES64")
            ELSE()
                SET(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES")
            ENDIF()
            # There is a bug in NSI that does not handle full unix paths properly. Make
            # sure there is at least one set of four (4) backlasshes.
            #SET(CPACK_NSIS_MODIFY_PATH ON)
            SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows\\\\nsis-top-logo.bmp")
            SET(CPACK_NSIS_INSTALLED_ICON_NAME "\\\\${PROJECT_NAME}.exe")            
            SET(CPACK_CREATE_DESKTOP_LINKS "${PROJECT_NAME}.exe")
            SET(CPACK_NSIS_CREATE_ICONS "CreateShortCut \\\"$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${PROJECT_NAME}.lnk\\\" \\\"$INSTDIR\\\\${PROJECT_NAME}.exe\\\"")
            SET(CPACK_NSIS_CREATE_ICONS_EXTRA "CreateShortCut  \\\"$DESKTOP\\\\${PROJECT_NAME}.lnk\\\" \\\"$INSTDIR\\\\${PROJECT_NAME}.exe\\\"")
            SET(CPACK_NSIS_DELETE_ICONS_EXTRA "Delete           \\\"$DESKTOP\\\\${PROJECT_NAME}.lnk\\\"")
            SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY}")
            SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\${PROJECT_COMPANYNAME_DOMAIN}")
            SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\${PROJECT_DOMAIN}")
            SET(SIDEBAR_IMAGE ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows\\\\database.bmp)
            SET(CPACK_NSIS_INSTALLER_MUI_ICON_CODE "!define MUI_WELCOMEFINISHPAGE_BITMAP \\\"${SIDEBAR_IMAGE}\\\"")
            SET(CPACK_NSIS_CONTACT "me@my-personal-home-page.com")            
            SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "..\\\\${PROJECT_NAME}.exe")
        ENDIF(CPACK_GENERATOR STREQUAL "NSIS")
    ELSEIF(OS_MACOSX)
        IF(NOT CPACK_GENERATOR)
            SET(CPACK_GENERATOR DragNDrop)
        ENDIF(NOT CPACK_GENERATOR)	
        #SET(CPACK_OSX_PACKAGE_VERSION "10.5")
    ELSEIF(OS_LINUX)
        SET(CPACK_STRIP_FILES ON)
        #SET(UBUNTU_LP_BUG 300472)
        #SET(CPACK_STRIP_FILES "bin/${PROJECT_NAME}")
        #SET(CPACK_SOURCE_STRIP_FILES "")
        IF(NOT CPACK_GENERATOR)
            SET(CPACK_GENERATOR DEB)
        ENDIF(NOT CPACK_GENERATOR)	
        IF(CPACK_GENERATOR STREQUAL "RPM" OR CPACK_GENERATOR STREQUAL "DEB")
            SET(CPACK_PACKAGING_INSTALL_PREFIX "/opt/${PROJECT_NAME_LOWERCASE}")
        ENDIF(CPACK_GENERATOR STREQUAL "RPM" OR CPACK_GENERATOR STREQUAL "DEB")
        CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/postinst.in" "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/scripts/postinst" @ONLY IMMEDIATE)
        FILE(COPY ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/scripts/postinst DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME} 
            FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
        CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/prerm.in" "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/scripts/prerm" @ONLY IMMEDIATE)
        FILE(COPY ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/scripts/prerm DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME} 
            FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
        IF(CPACK_GENERATOR STREQUAL "RPM")
	        #CPACK_RPM_PACKAGE_ARCHITECTURE CPACK_RPM_PACKAGE_LICENSE CPACK_RPM_PACKAGE_DESCRIPTION CPACK_RPM_SPEC_INSTALL_POST
	        #SET(CPACK_PACKAGE_RELEASE 1)
            SET(CPACK_RPM_PACKAGE_LICENSE "GPL v3")
            SET(CPACK_RPM_PACKAGE_AUTOREQPROV "no")
            SET(CPACK_RPM_PACKAGE_REQUIRES "libc.so.6 >= 2.12, libstdc++.so.6 >= 6.0.13")
            SET(CPACK_RPM_PACKAGE_RELEASE 1)
            SET(CPACK_RPM_PACKAGE_GROUP "Development/Libraries/${PROJECT_COMPANYNAME}")
            SET(CPACK_RPM_PACKAGE_ARCHITECTURE ${ARCH_TEXT_PACKAGE})
            SET(CPACK_RPM_PACKAGE_VERSION ${PROJECT_VERSION_SHORT})
            SET(CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/postinst")
            SET(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/prerm")
        ELSEIF(CPACK_GENERATOR STREQUAL "DEB")
            #CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/fixup_deb.sh.in" "${CMAKE_CURRENT_BINARY_DIR}/fixup_deb.sh" @ONLY IMMEDIATE)
            IF(ARCH_TEXT_PACKAGE STREQUAL x86_64)
                SET(ARCH_TEXT_PACKAGE amd64)
            ENDIF()
            #SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
            #CPACK_DEBIAN_PACKAGE_HOMEPAGE The URL of the web site for this package
            #SET(CPACK_DEBIAN_PACKAGE_DEBUG ON)
	        SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.12), libstdc++6 (>= 4.4.7)")
            SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
            SET(CPACK_DEBIAN_PACKAGE_SECTION "database")#input our section
            SET(CPACK_DEBIAN_PACKAGE_RECOMMENDS "Unknown")
            SET(CPACK_DEBIAN_PACKAGE_SUGGESTS "Unknown")
            SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${ARCH_TEXT_PACKAGE})#i386
            SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/postinst;${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/prerm")
        ENDIF(CPACK_GENERATOR STREQUAL "RPM")
    ELSEIF(OS_ANDROID)
        FIND_HOST_PROGRAM(ANDROID_DEPLOY_QT NAMES androiddeployqt PATHS ${QT_BINS_DIR})

        # Look for androiddeployqt program
        IF(NOT ANDROID_DEPLOY_QT)
            MESSAGE(FATAL_ERROR "Could not find androiddeployqt in ${QT_BINS_DIR} .")
        ENDIF(NOT ANDROID_DEPLOY_QT)

        # Set version
        SET(ANDROID_VERSION_NAME ${PROJECT_VERSION})
        SET(ANDROID_KEYSTORE_ALIAS ${PROJECT_COMPANYNAME})

        # set android package source for androiddeployqt json file
        SET(PACKAGE_SOURCE_ANDROID ${CMAKE_CURRENT_BINARY_DIR}/android)
        SET(PACKAGE_OUTPUT_ANDROID ${CMAKE_INSTALL_PREFIX})
        CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/strings.xml.in ${PACKAGE_SOURCE_ANDROID}/strings.xml @ONLY)
        CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/AndroidManifest.xml.in ${PACKAGE_SOURCE_ANDROID}/AndroidManifest.xml @ONLY)

        # create json file parsed by the androiddeployqt
        SET(ANDROID_SDK $ENV{ANDROID_SDK})

        SET(ANDROID_TARGET_ARCH ${ANDROID_NDK_ABI_NAME})
        #SET(ANDROID_TARGET_ARCH $ENV{ANDROID_TARGET_ARCH})
        SET(ANDROID_BUILD_TOOLS_REVISION $ENV{ANDROID_BUILD_TOOLS_REVISION})
        CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/configAndroid.json.in ${PACKAGE_SOURCE_ANDROID}/configAndroid.json @ONLY)

        SET(ANDROID_PACKAGE_RELEASE_NAME ${CPACK_PACKAGE_FILE_NAME}.apk)

        ADD_CUSTOM_COMMAND (
            OUTPUT createApkFromAndroidDeployQtRelease
            DEPENDS ${PACKAGE_SOURCE_ANDROID}/AndroidManifest.xml
            COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/res ${PACKAGE_SOURCE_ANDROID}/res
            COMMAND ${ANDROID_DEPLOY_QT} --output ${PACKAGE_OUTPUT_ANDROID}/ --input ${PACKAGE_SOURCE_ANDROID}/configAndroid.json --release
            COMMAND ${CMAKE_COMMAND} -E rename ${PACKAGE_OUTPUT_ANDROID}/bin/QtApp-release-unsigned.apk ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_NAME}
        )

        SET(ANDROID_PACKAGE_RELEASE_SIGNED_NAME ${CPACK_PACKAGE_FILE_NAME}_signed.apk)

        ADD_CUSTOM_COMMAND (
            OUTPUT createApkSignedFromAndroidDeployQtRelease
            DEPENDS ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_NAME}
            COMMAND ${CMAKE_COMMAND} -E copy ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_NAME} ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_NAME}
            COMMAND jarsigner -keystore ~/$ENV{ANDROID_KEYSTORE} -storepass $ENV{ANDROID_KEYSTORE_PASSWD}
            -keypass $ENV{ANDROID_KEY_PASSWD} ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_NAME} ${ANDROID_KEYSTORE_ALIAS}
        )

        SET(ANDROID_PACKAGE_RELEASE_SIGNED_ALIGNED_NAME ${CPACK_PACKAGE_FILE_NAME}_signed_aligned.apk)

        ADD_CUSTOM_COMMAND (
            OUTPUT createApkSignedAlignedFromAndroidDeployQtRelease
            DEPENDS ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_NAME}
            COMMAND ${CMAKE_COMMAND} -E remove ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_ALIGNED_NAME}
            COMMAND ${ANDROID_SDK}/build-tools/${ANDROID_BUILD_TOOLS_REVISION}/zipalign -v 4 ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_NAME} ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_ALIGNED_NAME}
        )

        ADD_CUSTOM_COMMAND (
            OUTPUT apkInstall
            DEPENDS ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_ALIGNED_NAME}
            COMMAND ${ANDROID_SDK}/platform-tools/adb install -r ${PACKAGE_OUTPUT_ANDROID}/${ANDROID_PACKAGE_RELEASE_SIGNED_ALIGNED_NAME}
        )

        # Command to create apk from Makefile
        ADD_CUSTOM_TARGET(apk_release
            DEPENDS createApkFromAndroidDeployQtRelease
        )

        # Command to create signed apk from Makefile
        ADD_CUSTOM_TARGET(apk_signed
            DEPENDS createApkSignedFromAndroidDeployQtRelease
        )

        # Command to create signed aligned apk from Makefile
        ADD_CUSTOM_TARGET(apk_signed_aligned
            DEPENDS createApkSignedAlignedFromAndroidDeployQtRelease
        )

        # Command to install the signed aligned apk through adb from Makefile
        ADD_CUSTOM_TARGET(apk_install
            DEPENDS apkInstall
        )
    ENDIF(OS_WINDOWS)
    INCLUDE(CPack)
ENDIF(CPACK_SUPPORT)
